// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: kvservice.proto

#include "kvservice.pb.h"
#include "kvservice.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace KvStore {

static const char* KvService_method_names[] = {
  "/KvStore.KvService/Get",
  "/KvStore.KvService/Set",
};

std::unique_ptr< KvService::Stub> KvService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KvService::Stub> stub(new KvService::Stub(channel, options));
  return stub;
}

KvService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Get_(KvService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Set_(KvService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KvService::Stub::Get(::grpc::ClientContext* context, const ::KvStore::GetRequest& request, ::KvStore::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::KvStore::GetRequest, ::KvStore::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void KvService::Stub::async::Get(::grpc::ClientContext* context, const ::KvStore::GetRequest* request, ::KvStore::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::KvStore::GetRequest, ::KvStore::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void KvService::Stub::async::Get(::grpc::ClientContext* context, const ::KvStore::GetRequest* request, ::KvStore::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::KvStore::GetResponse>* KvService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::KvStore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::KvStore::GetResponse, ::KvStore::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::KvStore::GetResponse>* KvService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::KvStore::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status KvService::Stub::Set(::grpc::ClientContext* context, const ::KvStore::SetRequest& request, ::KvStore::SetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::KvStore::SetRequest, ::KvStore::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Set_, context, request, response);
}

void KvService::Stub::async::Set(::grpc::ClientContext* context, const ::KvStore::SetRequest* request, ::KvStore::SetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::KvStore::SetRequest, ::KvStore::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, std::move(f));
}

void KvService::Stub::async::Set(::grpc::ClientContext* context, const ::KvStore::SetRequest* request, ::KvStore::SetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Set_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::KvStore::SetResponse>* KvService::Stub::PrepareAsyncSetRaw(::grpc::ClientContext* context, const ::KvStore::SetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::KvStore::SetResponse, ::KvStore::SetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Set_, context, request);
}

::grpc::ClientAsyncResponseReader< ::KvStore::SetResponse>* KvService::Stub::AsyncSetRaw(::grpc::ClientContext* context, const ::KvStore::SetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRaw(context, request, cq);
  result->StartCall();
  return result;
}

KvService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KvService::Service, ::KvStore::GetRequest, ::KvStore::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::KvStore::GetRequest* req,
             ::KvStore::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KvService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KvService::Service, ::KvStore::SetRequest, ::KvStore::SetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](KvService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::KvStore::SetRequest* req,
             ::KvStore::SetResponse* resp) {
               return service->Set(ctx, req, resp);
             }, this)));
}

KvService::Service::~Service() {
}

::grpc::Status KvService::Service::Get(::grpc::ServerContext* context, const ::KvStore::GetRequest* request, ::KvStore::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KvService::Service::Set(::grpc::ServerContext* context, const ::KvStore::SetRequest* request, ::KvStore::SetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace KvStore

